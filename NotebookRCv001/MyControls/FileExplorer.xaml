<Page x:Class="NotebookRCv001.MyControls.FileExplorer"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:viewmodels="clr-namespace:NotebookRCv001.ViewModels"
      xmlns:converters="clr-namespace:NotebookRCv001.Converters"
      xmlns:local="clr-namespace:NotebookRCv001.MyControls"
      mc:Ignorable="d" 
      x:Name="page" KeepAlive="True"
      Title="FileExplorer">
    <Page.Resources>
        <viewmodels:FileExplorerViewModel x:Key="viewmodel"/>
        <local:ButtonsClearAndClose x:Key="buttonsclose"/>
        <converters:ColumnsWidthConverter x:Key="columnswidth"/>
        <Style x:Key="imagestyle" TargetType="Image">
            <Setter Property="Stretch" Value="None"/>
            <Setter Property="SnapsToDevicePixels" Value="False"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" Value="0.5"/>
                </Trigger>
                <MultiDataTrigger x:Name="isfolderTrue_iscoverTrue">
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsFolder, UpdateSourceTrigger=PropertyChanged}"  Value="True"/>
                        <Condition Binding="{Binding IsCover, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Source" Value="{Binding Icon, UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Page}, 
                            Mode=FindAncestor}, Path=DataContext.ImageHeight, UpdateSourceTrigger=PropertyChanged}"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <MultiDataTrigger x:Name="isfolderTrue_iscoverFalse">
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsFolder, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                        <Condition Binding="{Binding IsCover, UpdateSourceTrigger=PropertyChanged}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Source" Value="{StaticResource catalogV001}"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <MultiDataTrigger x:Name="isfileTrue_iscoverTrue">
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsFile, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                        <Condition Binding="{Binding IsCover,  UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Source" Value="{Binding Icon, TargetNullValue= {StaticResource fileV001}, 
                            UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Page}, 
                            Mode=FindAncestor}, Path=DataContext.ImageHeight, UpdateSourceTrigger=PropertyChanged}"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <MultiDataTrigger x:Name="isfileTrue_iscoverFalse">
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsFile, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                        <Condition Binding="{Binding IsCover, UpdateSourceTrigger=PropertyChanged}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="Source" Value="{StaticResource fileV001}"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>
        <DataTemplate x:Key="listTemplate">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Image Style="{StaticResource imagestyle}" Grid.Row="0" >
                    <Image.InputBindings>
                        <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type Page}
                                ,Mode=FindAncestor},Path=DataContext.ListViewNameMouseLeftButtonDown, UpdateSourceTrigger=PropertyChanged}"
                                                   CommandParameter="{Binding Tag, UpdateSourceTrigger=PropertyChanged}"/>
                    </Image.InputBindings>
                </Image>
                <TextBlock x:Name="name" Grid.Row="1" Text="{Binding Tag.Name, UpdateSourceTrigger=PropertyChanged}" 
                           MaxWidth="50" ToolTip="{Binding Path=Tag.Name, UpdateSourceTrigger=PropertyChanged}"
                           FontSize="12" />
            </Grid>
        </DataTemplate>
    </Page.Resources>
    <Page.DataContext>
        <Binding Source="{StaticResource viewmodel}"/>
    </Page.DataContext>
    <Grid >
        <Border Grid.Row="0" BorderBrush="White" BorderThickness="1" CornerRadius="10,10,0,0" Background="Gray">
                <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                    <Border BorderBrush="White" BorderThickness="1" CornerRadius="10,10,0,0" Grid.Row="0" VerticalAlignment="Center">
                    <Grid >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <ComboBox x:Name="drives"  Grid.Column="0" ItemsSource="{Binding DriveInfos, UpdateSourceTrigger=PropertyChanged}"
                                  SelectedIndex="{Binding SelectedIndexDrives, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                  Margin="5,0,5,0">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding ComboBoxDrivesLoaded, UpdateSourceTrigger=PropertyChanged}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <i:InvokeCommandAction Command="{Binding ComboBoxDrivesSelectionChanged, UpdateSourceTrigger=PropertyChanged}"
                                                           CommandParameter="{Binding ElementName=drives, Path=SelectedItem, 
                                        UpdateSourceTrigger=PropertyChanged}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </ComboBox>
                        <Button Grid.Column="1" Width="24" Height="24" Template="{StaticResource FlatButtonControlTemplate}"
                                Command="{Binding ClickToParentDirectory, UpdateSourceTrigger=PropertyChanged}">
                            <Image Source="{StaticResource fileOverviewUp}" Stretch="None" SnapsToDevicePixels="True" />
                        </Button>
                        <Border Grid.Column="2" >
                            <TextBlock  Text="{Binding CurrentDirectoryFullName , UpdateSourceTrigger=PropertyChanged}" 
                                   Margin="5,0,0,0" VerticalAlignment="Center" >
                                <TextBlock.InputBindings>
                                    <MouseBinding MouseAction="LeftClick" Command="{Binding ComboBoxDrivesSelectionChanged, UpdateSourceTrigger=PropertyChanged}"
                                                           CommandParameter="{Binding ElementName=drives, Path=SelectedItem, UpdateSourceTrigger=PropertyChanged}"/>
                                </TextBlock.InputBindings>
                            </TextBlock>
                        </Border>
                        <Border Grid.Column="4" Height="24" VerticalAlignment="Center" Margin="5,0,0,0" >
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <CheckBox x:Name="tiles" Content="{Binding Headers[8], UpdateSourceTrigger=PropertyChanged}"  Grid.Row="0"
                                          IsChecked="{Binding IsTilesEnabled, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                                          Command="{Binding CheckedIsTilesEnabled, UpdateSourceTrigger=PropertyChanged}"
                                          CommandParameter="{Binding ElementName=tiles, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}"
                                          VerticalContentAlignment="Center" Margin="10,0,10,0">
                                </CheckBox>
                            </Grid>
                        </Border>
                        <Border Grid.Column="5" Height="24" VerticalAlignment="Center" Margin="5,0,0,0" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <CheckBox x:Name="cover" Content="{Binding Headers[7], UpdateSourceTrigger=PropertyChanged}" Grid.Column="0" Grid.Row="0"
                                          IsChecked="{Binding IsCoverEnabled, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                                          VerticalContentAlignment="Center" Margin="10,0,5,0" 
                                          Command="{Binding CheckedIsCover, UpdateSourceTrigger=PropertyChanged}"
                                          CommandParameter="{Binding ElementName=cover, Path=IsChecked, UpdateSourceTrigger=PropertyChanged}">
                                </CheckBox>
                                <ComboBox x:Name="iconsizes"  Grid.Column="1" Grid.Row="0"  
                                          ItemsSource="{Binding CoverSizes, UpdateSourceTrigger=PropertyChanged}" Margin="5,0,0,0"
                                          SelectedIndex="{Binding CoverSizesIndex, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Loaded">
                                            <i:InvokeCommandAction Command="{Binding CoverSizesLoaded, UpdateSourceTrigger=PropertyChanged}"
                                                           CommandParameter="{Binding ElementName=iconsizes, UpdateSourceTrigger=PropertyChanged}"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="SelectionChanged">
                                            <i:InvokeCommandAction Command="{Binding CoverSizesSelectionChanged, UpdateSourceTrigger=PropertyChanged}"
                                                           CommandParameter="{Binding ElementName=iconsizes, Path=SelectedItem, 
                                        UpdateSourceTrigger=PropertyChanged}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </ComboBox>
                            </Grid>
                        </Border>
                        <Border Grid.Column="6" VerticalAlignment="Center" >
                            <ContentControl Content="{StaticResource buttonsclose}" Margin="5,0,5,0"/>
                        </Border>
                    </Grid>
                    </Border>
                    <Border x:Name="forpanels" BorderThickness="0" Grid.Row="1">
                        <ListView x:Name="list_tiles" Background="Black" ItemTemplate="{StaticResource listTemplate}"
                            ItemsSource="{Binding CurrentDirectoryList, UpdateSourceTrigger=PropertyChanged}"
                            ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                            <ListView.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Background="Black" />
                                </ItemsPanelTemplate>
                            </ListView.ItemsPanel>
                        </ListView>
                        <Border.Style>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Page}
                                        ,Mode=FindAncestor}, Path=DataContext.IsTilesEnabled, UpdateSourceTrigger=PropertyChanged}"
                                                 Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                    <Border x:Name="forlist" BorderThickness="0" Grid.Row="1">
                        <ListView x:Name="list" ItemsSource="{Binding CurrentDirectoryList, UpdateSourceTrigger=PropertyChanged}" 
                          HorizontalAlignment="Stretch" Focusable="True" VirtualizingPanel.IsVirtualizing="True" 
                          ScrollViewer.HorizontalScrollBarVisibility="Hidden" Style="{x:Null}" Background="Black">
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn x:Name="name" Header="{Binding Headers[1], UpdateSourceTrigger=PropertyChanged}" 
                                            Width="{Binding ListView_ColumnsWidth[0], Converter={StaticResource columnswidth}, Mode=TwoWay, 
                                        UpdateSourceTrigger=PropertyChanged}">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <Grid >
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="*"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Image  Grid.Column="0" Style="{StaticResource imagestyle}"/>
                                                    <TextBlock x:Name="tbname" Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Foreground="White" 
                                                       Grid.Column="1" Margin="0,5,0,0" Tag="{Binding Tag, UpdateSourceTrigger=PropertyChanged}" TextAlignment="Left" >
                                                        <TextBlock.InputBindings>
                                                            <MouseBinding MouseAction="LeftDoubleClick" 
                                                                          Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type Page},Mode=FindAncestor},
                                                                Path=DataContext.ListViewNameMouseLeftButtonDown, UpdateSourceTrigger=PropertyChanged}" CommandParameter=
                                                                          "{Binding Tag, UpdateSourceTrigger=PropertyChanged}"/>
                                                        </TextBlock.InputBindings>
                                                    </TextBlock>
                                                </Grid>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="extension" Header="{Binding Headers[2], UpdateSourceTrigger=PropertyChanged}"
                                            Width="{Binding ListView_ColumnsWidth[1], Converter={StaticResource columnswidth}, 
                                Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock  Foreground="White"
                                                   TextAlignment="Center">
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding IsFile, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                                    <Setter Property="Text" Value="{Binding FileExtension, UpdateSourceTrigger=PropertyChanged}"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding IsFolder, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                                    <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}, 
                                                                Mode=FindAncestor}, Path=DataContext.Headers[6]}"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="size" Header="{Binding Headers[3], UpdateSourceTrigger=PropertyChanged}" 
                                            Width="{Binding ListView_ColumnsWidth[2], Converter={StaticResource columnswidth}, 
                                Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Path=Size, UpdateSourceTrigger=PropertyChanged}" Foreground="White"
                                                   TextAlignment="Center"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="date" Header="{Binding Headers[4], UpdateSourceTrigger=PropertyChanged}" 
                                            Width="{Binding ListView_ColumnsWidth[3], Converter={StaticResource columnswidth}, 
                                Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Path=Date, UpdateSourceTrigger=PropertyChanged}" Foreground="White"
                                                   TextAlignment="Center"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn x:Name="last" Header="" Width="{Binding ListView_ColumnsWidth[4], Converter={StaticResource columnswidth}, 
                                ConverterParameter=last, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="" Foreground="White"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="ListViewItem">
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="Black"/>
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="Black"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding ListViewLoaded}" CommandParameter="{Binding ElementName=list}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </ListView>
                        <Border.Style>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Page}
                                        ,Mode=FindAncestor}, Path=DataContext.IsTilesEnabled, UpdateSourceTrigger=PropertyChanged}"
                                                 Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                </Grid>
        </Border>
    </Grid>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding PageLoaded, UpdateSourceTrigger=PropertyChanged}"
                                   CommandParameter="{StaticResource columnswidth}"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="SizeChanged">
            <i:InvokeCommandAction Command="{Binding PageSizeChanged, UpdateSourceTrigger=PropertyChanged}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
</Page>
